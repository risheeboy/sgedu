# App manifest

## Purpose of App

- To help students with exam preperation

## Features

- Generate questions based on topic and grade
- Generate answers based on question and grade

## Tech Stack

- Flutter web-app (UI)
- Cloud Functions for Firebase (Backend)
- Firestore (Database)
- Firebase Storage (Image store)
- Firebase Hosting (Website deployment)
- Firebase Auth (Google sign-in)

## Guidelines

- AI & embedding APIs should be called from inside Firebase `onDocumentCreated` functions (not from UI) e.g. UI writes to a firebase collection and listens to firestore updates (done by function), to show the output. Increase function memory to 512 MiB when embedding is used. 
- Google`s fast Gen AI APIs should be preferred, e.g. `gemini-2.0-flash-exp` for image understanding/text-generation and `text-multilingual-embedding-002` for multilingual embeddings. 
- LLM text generation API calls should include response JSON schema e.g. in `type SchemaType.OBJECT` format. 
- Use typescript for node functions.
- Use Vertex AI with Firebase, instead of Google AI.

## Code Organization

### Key Directories

- Flutter services layer for Firebase interactions (`lib/services/`)
- Flutter reusable UI components (`lib/widgets/`)
- Flutter integration tests in (`lib/testing/integration/`)

### Firebase Configuration Files

- Firebase project configuration (`firebase.json`)
- Data security rules (`firestore.rules`)
- File storage rules (`storage.rules`)
- CORS settings (`cors.json`)
- Firebase IDs/keys (`lib/firebase_options.dart`)

### Key Flutter Dependencies

- cloud_firestore- Firestore integration
- cloud_functions- Firebase Functions integration
- firebase_auth- Authentication
- go_router- Navigation
- flutter_markdown- Content rendering
