rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isGamePlayer(gameData) {
      return isSignedIn() && 
             (request.auth.uid in gameData.playerIds || 
              gameData.players[request.auth.uid] != null);
    }
    
    function isGameHost(gameData) {
      return isSignedIn() && request.auth.uid == gameData.hostId;
    }

    match /requests/{requestId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isOwner(resource.data.userId) 
        && isOwner(request.resource.data.userId);
      allow delete: if isOwner(resource.data.userId);
    }

    match /questions/{questionId} {
      allow read: if true;
    }

    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create, update: if isOwner(userId)
        && isOwner(request.resource.data.userId)
        && request.resource.data.keys().hasOnly(['userId', 'lastLogin']);
    }

    match /feedbacks/{feedbackId} {
      allow read: if isSignedIn();
      allow write: if isOwner(request.resource.data.userId);
    }

    match /chat_sessions/{session} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, update, delete: if isOwner(resource.data.userId);
    }

    match /quizzes/{quizId} {
      allow read: if true;
      allow create: if isOwner(request.resource.data.userId);
      
      allow update: if isOwner(resource.data.userId)
        && request.resource.data.userId == resource.data.userId;
      
      allow delete: if isOwner(resource.data.userId);
    }
    
    match /games/{gameId} {
      allow list: if true;
      
      allow read: if true;
      
      // Users can create games (they become the host)
      allow create: if isOwner(request.resource.data.hostId) && 
                      request.resource.data.players[request.auth.uid] != null &&
                      request.auth.uid in request.resource.data.playerIds;
      
      // Game host can update the game
      allow update: if isGameHost(resource.data) && 
                      request.resource.data.hostId == resource.data.hostId;
      
      // Player can update the game to join if it's in waiting status and public
      allow update: if resource.data.status == 'waiting';
      
      // Host can delete the game
      allow delete: if isGameHost(resource.data);
      
      // Rules for scores subcollection
      match /scores/{scoreId} {
        // Game players can read all scores
        allow read: if true;
        
        // Players can submit their own scores 
        allow create, update: if isSignedIn() && 
                        (scoreId == request.auth.uid || 
                         request.resource.data.userId == request.auth.uid);
        
        // No deletes allowed for scores 
        allow delete: if false;
      }
    }
    
    /* 
    match /scores/{scoreId} {
      // Anyone can read scores
      allow read: if isSignedIn();
      
      // Users can create their own scores
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      
      // Scores can be updated by the system (for AI validation) or by the user who created them
      allow update: if isSignedIn() && (
                      request.auth.uid == resource.data.userId || 
                      request.resource.data.status == 'completed' || 
                      request.resource.data.status == 'error'
                    );
                    
      // No deletes allowed for scores
      allow delete: if false;
    }
    */

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
