rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    match /requests/{requestId} {
      allow read: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isOwner(resource.data.userId) 
        && isOwner(request.resource.data.userId);
      allow delete: if isOwner(resource.data.userId);
    }

    match /questions/{questionId} {
      allow read: if true;
    }

    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create, update: if isOwner(userId)
        && isOwner(request.resource.data.userId)
        && request.resource.data.keys().hasOnly(['userId', 'lastLogin']);
    }

    match /feedbacks/{feedbackId} {
      allow read: if isSignedIn();
      allow write: if isOwner(request.resource.data.userId);
    }

    match /chat_sessions/{session} {
      allow create: if isOwner(request.resource.data.userId);
      allow read, update, delete: if isOwner(resource.data.userId);
    }

    match /quizzes/{quizId} {
      allow create: if isOwner(request.resource.data.userId);
      
      allow read: if isOwner(resource.data.userId);
      
      allow update: if isOwner(resource.data.userId)
        && request.resource.data.userId == resource.data.userId;
      
      allow delete: if isOwner(resource.data.userId);
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
